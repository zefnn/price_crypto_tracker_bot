from aiogram import types
from services.crypto.price_client import CryptoPriceClient



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëãüëãüëã\n–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def cmd_help(message: types.Message):
    text_help = """
    üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /price [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã] - –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n(–ù–∞–ø—Ä–∏–º–µ—Ä <code>/price ethereum</code>)
‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç    
    
–°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏! üöÄ
    """
    await message.answer(text_help)

parser = CryptoPriceClient()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price c –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
async def cmd_price(message: types.Message):
    parts = message.text.split()

    coin_id = parts[1].lower() if len(parts) > 1 else 'bitcoin'

    price_data = await parser.get_price(coin_id, 'usd,rub')

    if price_data is None:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif not price_data:
        await message.answer(f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —Å –∏–º–µ–Ω–µ–º '{coin_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif coin_id not in price_data['coin']:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{coin_id}'.")
    else:
        usd_price = price_data["price_usd"]
        rub_price = price_data["price_rub"]
        ch_24h = price_data["change_24h"]

        response_text = (
            f"üíé <b>{coin_id.upper()}</b>\n\n"
            f"üíµ <b>${usd_price:,.2f}</b>\n"
            f"‚ÇΩ <b>{rub_price:,.2f}</b>\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: <b>{ch_24h:+.2f}%</b>"
        )

        await message.answer(response_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def cmd_msg(message: types.Message):
    username = message.from_user.username
    help_text = (
        " —è –ø–æ–∫–∞ –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "‚Ä¢ /price [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã] - –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/price ethereum</code>)"
    )
    await message.answer(username + help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
async def cmd_list(message: types.Message):
    list_text = (
        "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n\n"
        "‚Ä¢ Bitcoin (BTC) ‚Üí <code>/price bitcoin</code>\n"
        "‚Ä¢ Ethereum (ETH) ‚Üí <code>/price ethereum</code>\n"
        "‚Ä¢ BNB (BNB) ‚Üí <code>/price binancecoin</code>\n"
        "‚Ä¢ Solana (SOL) ‚Üí <code>/price solana</code>\n"
        "‚Ä¢ XRP (XRP) ‚Üí <code>/price ripple</code>\n"
        "‚Ä¢ Cardano (ADA) ‚Üí <code>/price cardano</code>\n"
        "‚Ä¢ Dogecoin (DOGE) ‚Üí <code>/price dogecoin</code>\n"
        "‚Ä¢ TRON (TRX) ‚Üí <code>/price tron</code>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <code>/price [id]</code>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É."
    )
    await message.answer(list_text)